package com.insightfullogic.honest_profiler.core.profiles.lean;

import com.insightfullogic.honest_profiler.core.parser.StackFrame;

public class FrameInfo
{
    private final long methodId;
    private final int bci;
    private final int lineNr;

    public FrameInfo(long methodId, int bci, int lineNr)
    {
        this.methodId = methodId;
        this.bci = bci;
        this.lineNr = lineNr;
    }

    public FrameInfo(StackFrame stackFrame)
    {
        this.methodId = stackFrame.getMethodId();
        this.bci = stackFrame.getBci();
        this.lineNr = stackFrame.getLineNumber();
    }

    public long getMethodId()
    {
        return methodId;
    }

    public int getBci()
    {
        return bci;
    }

    public int getLineNr()
    {
        return lineNr;
    }

    public FrameInfo copy()
    {
        return new FrameInfo(methodId, bci, lineNr);
    }

    @Override
    // Generated by Eclipse
    public int hashCode()
    {
        final int prime = 31;
        int result = 1;
        result = prime * result + bci;
        result = prime * result + lineNr;
        result = prime * result + (int) (methodId ^ (methodId >>> 32));
        return result;
    }

    @Override
    // Generated by Eclipse
    public boolean equals(Object obj)
    {
        if (this == obj)
        {
            return true;
        }

        if (obj == null)
        {
            return false;
        }

        if (getClass() != obj.getClass())
        {
            return false;
        }

        FrameInfo other = (FrameInfo) obj;
        if (bci != other.bci)
        {
            return false;
        }

        if (lineNr != other.lineNr)
        {
            return false;
        }

        if (methodId != other.methodId)
        {
            return false;
        }

        return true;
    }

    @Override
    public String toString()
    {
        return "frame[" + methodId + ":" + lineNr + ":" + bci + "]";
    }
}
