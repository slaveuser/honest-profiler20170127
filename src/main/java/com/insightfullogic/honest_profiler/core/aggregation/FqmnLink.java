package com.insightfullogic.honest_profiler.core.aggregation;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.insightfullogic.honest_profiler.core.profiles.lean.LeanNode;

/**
 * This class collects all {@link LeanNode}s with the same FQMN, partitioned per
 * thread, as well as all possible parent LeanNodes and child LeanNodes,
 * partitioned per Thread.
 *
 * For any given FQMN and thread id, there is only 1 {@link FqmnLink}.
 *
 * This creates a navigable network for easily calculating a variety of
 * aggregations.
 */
public class FqmnLink
{
    private final String fqmn;

    private final Map<Long, Set<LeanNode>> parents;
    private final Map<Long, Set<LeanNode>> children;
    private final Map<Long, Set<LeanNode>> siblings;

    public FqmnLink(String fqmn)
    {
        this.fqmn = fqmn;

        parents = new HashMap<>();
        children = new HashMap<>();
        siblings = new HashMap<>();
    }

    public String getFqmn()
    {
        return fqmn;
    }

    public Map<Long, Set<LeanNode>> getParents()
    {
        return parents;
    }

    public Map<Long, Set<LeanNode>> getChildren()
    {
        return children;
    }

    public Map<Long, Set<LeanNode>> getSiblings()
    {
        return siblings;
    }

    public void addParent(Long threadId, LeanNode parent)
    {
        addToSet(parents, threadId, parent);
    }

    public void addChild(Long threadId, LeanNode child)
    {
        addToSet(children, threadId, child);
    }

    public void addSibling(Long threadId, LeanNode sibling)
    {
        addToSet(siblings, threadId, sibling);
    }

    private <T> void addToSet(Map<Long, Set<T>> map, Long threadId, T node)
    {
        if (node == null)
        {
            return;
        }

        Set<T> set = map.computeIfAbsent(threadId, k -> new HashSet<>());
        set.add(node);
    }

    // Generated by Eclipse
    @Override
    public int hashCode()
    {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((fqmn == null) ? 0 : fqmn.hashCode());
        return result;
    }

    // Generated by Eclipse
    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
        {
            return true;
        }

        if (obj == null)
        {
            return false;
        }

        if (getClass() != obj.getClass())
        {
            return false;
        }

        FqmnLink other = (FqmnLink) obj;
        if (fqmn == null)
        {
            if (other.fqmn != null)
            {
                return false;
            }
        }
        else if (!fqmn.equals(other.fqmn))
        {
            return false;
        }

        return true;
    }
}
